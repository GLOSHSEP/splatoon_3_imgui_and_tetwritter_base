# Parameters:
# - INPUT_FILE: The binary file to process
# - OUTPUT_ASM_FILE: The output assembly file
# - OUTPUT_HEADER_FILE: The output header file
# - SYMBOL_NAME: The symbol name
# - ALIGNMENT: The alignment value to use
# - IS_DATA: Whether to put in .data or .rodata

file(READ ${INPUT_FILE} BINARY_CONTENT HEX)
file(SIZE ${INPUT_FILE} FILE_SIZE)

string(LENGTH ${BINARY_CONTENT} HEX_LENGTH)
math(EXPR BYTE_COUNT "${HEX_LENGTH} / 2")

if(IS_DATA)
  set(SECTION ".data")
else()
  set(SECTION ".rodata")
endif()

set(ASMF "// Generated by BIN2S - please don't edit directly\n")
set(ASMF "${ASMF}\t.section ${SECTION}.${SYMBOL_NAME}, \"a\"\n")
set(ASMF "${ASMF}\t.balign ${ALIGNMENT}\n")
set(ASMF "${ASMF}\t.global ${SYMBOL_NAME}\n")
set(ASMF "${ASMF}${SYMBOL_NAME}:\n")

set(ASMF "${ASMF}\t.byte ")
set(COUNT 0)
set(LINE_COUNT 0)

while(COUNT LESS BYTE_COUNT)
  math(EXPR START_POS "${COUNT} * 2")
  string(SUBSTRING ${BINARY_CONTENT} ${START_POS} 2 BYTE_HEX)
  
  string(PREPEND BYTE_HEX "0x")
  math(EXPR BYTE_DEC "${BYTE_HEX}")
  
  set(FORMATTED_BYTE "${BYTE_DEC}")
  if(BYTE_DEC LESS 10)
    set(FORMATTED_BYTE "  ${BYTE_DEC}")
  elseif(BYTE_DEC LESS 100)
    set(FORMATTED_BYTE " ${BYTE_DEC}")
  endif()
  
  set(ASMF "${ASMF}${FORMATTED_BYTE}")
  
  math(EXPR COUNT "${COUNT} + 1")
  math(EXPR LINE_COUNT "${LINE_COUNT} + 1")
  
  if(COUNT LESS BYTE_COUNT)
    if(LINE_COUNT EQUAL 16)
      set(ASMF "${ASMF}\n\t.byte ")
      set(LINE_COUNT 0)
    else()
      set(ASMF "${ASMF},")
    endif()
  endif()
endwhile()

set(ASMF "${ASMF}\n\n\t.global ${SYMBOL_NAME}_end\n")
set(ASMF "${ASMF}${SYMBOL_NAME}_end:\n\n")

set(ASMF "${ASMF}\t.global ${SYMBOL_NAME}_size\n")
set(ASMF "${ASMF}\t.balign 4\n")
set(ASMF "${ASMF}${SYMBOL_NAME}_size: .int ${FILE_SIZE}\n\n")

set(ASMF "${ASMF}#if defined(__linux__) && defined(__ELF__)\n.section .note.GNU-stack,\"\",\"%progbits\n#endif")

file(WRITE ${OUTPUT_ASM_FILE} "${ASMF}")

if (IS_DATA)
  set(CONST_SPECIFIER "")
else()
  set(CONST_SPECIFIER "const")
endif()

set(HDRF "// Generated by BIN2S - don't edit directly\n")
set(HDRF "${HDRF}#pragma once\n")
set(HDRF "${HDRF}#include <stddef.h>\n")
set(HDRF "${HDRF}#include <stdint.h>\n\n")
set(HDRF "${HDRF}extern ${CONST_SPECIFIER} uint8_t ${SYMBOL_NAME}[];\n")
set(HDRF "${HDRF}extern ${CONST_SPECIFIER} uint8_t ${SYMBOL_NAME}_end[];\n")
set(HDRF "${HDRF}#if __cplusplus >= 201103L\n")
set(HDRF "${HDRF}static constexpr size_t ${SYMBOL_NAME}_size=${FILE_SIZE};\n")
set(HDRF "${HDRF}#else\n")
set(HDRF "${HDRF}static const size_t ${SYMBOL_NAME}_size=${FILE_SIZE};\n")
set(HDRF "${HDRF}#endif\n")

file(WRITE ${OUTPUT_HEADER_FILE} "${HDRF}")
